apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: jupyter-nbconvert-complete
  namespace: tekton-pipelines
  labels:
    app.kubernetes.io/name: jupyter-nbconvert-complete
    app.kubernetes.io/component: tekton-task
    app.kubernetes.io/version: "1.0.0"
spec:
  description: |
    Complete Jupyter nbconvert task for converting executed notebooks to HTML format.
    Uses exact same parameters as GitHub Actions workflow for consistent output.
  params:
  - name: input-notebook-name
    description: Name of the input notebook file to convert
    type: string
    default: "executed_notebook.ipynb"
  - name: output-html-name
    description: Name for the output HTML file
    type: string
    default: "executed_notebook.html"
  - name: nbconvert-template
    description: Template to use for nbconvert
    type: string
    default: "html"
  - name: embed-images
    description: Whether to embed images in HTML
    type: string
    default: "true"
  workspaces:
  - name: shared-storage
    description: Shared storage for input notebook and output HTML
    mountPath: /workspace/shared
  results:
  - name: conversion-status
    description: Status of HTML conversion
  - name: output-html-path
    description: Path to the generated HTML file
  - name: html-size
    description: Size of the generated HTML file
  - name: nbconvert-log-path
    description: Path to the nbconvert log file
  steps:
  - name: convert-to-html-complete
    image: nvcr.io/nvidia/rapidsai/notebooks:25.04-cuda12.8-py3.12
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop: ["ALL"]
      runAsNonRoot: false
      runAsUser: 0
      runAsGroup: 0
      seccompProfile:
        type: RuntimeDefault
    env:
    - name: WORKSPACE_SHARED_PATH
      value: $(workspaces.shared-storage.path)
    - name: DOCKER_WRITEABLE_DIR
      value: "/workspace/shared/artifacts"
    - name: INPUT_NOTEBOOK
      value: $(params.input-notebook-name)
    - name: OUTPUT_NOTEBOOK_HTML
      value: $(params.output-html-name)
    - name: HOME
      value: "/root"
    - name: PATH
      value: "/opt/conda/envs/rapids/bin:/opt/conda/bin:/usr/local/bin:/usr/bin:/bin"
    script: |
      #!/bin/bash
      set -eu
      
      echo "Starting Complete Jupyter nbconvert HTML conversion (GitHub Actions Compatible)..."
      echo "Shared workspace: ${WORKSPACE_SHARED_PATH}"
      echo "Input notebook: ${INPUT_NOTEBOOK}"
      echo "Output HTML: ${OUTPUT_NOTEBOOK_HTML}"
      
      # Fix permissions comprehensively
      echo "Fixing all permission issues..."
      chown -R root:root /opt/conda 2>/dev/null || echo "WARNING: Cannot change conda ownership"
      chmod -R 777 /opt/conda 2>/dev/null || echo "WARNING: Cannot change conda permissions"
      chown -R root:root "${WORKSPACE_SHARED_PATH}" 2>/dev/null || echo "WARNING: Cannot change workspace ownership"
      chmod -R 777 "${WORKSPACE_SHARED_PATH}" 2>/dev/null || echo "WARNING: Cannot change workspace permissions"
      
      # Setup environment
      export HOME="/root"
      export USER="root"
      export PATH="/opt/conda/envs/rapids/bin:/opt/conda/bin:$PATH"
      
      cd "${WORKSPACE_SHARED_PATH}"
      
      # Verify input notebook exists
      INPUT_NOTEBOOK_PATH="${DOCKER_WRITEABLE_DIR}/${INPUT_NOTEBOOK}"
      if [ ! -f "${INPUT_NOTEBOOK_PATH}" ]; then
        echo "ERROR: Input notebook not found: ${INPUT_NOTEBOOK_PATH}"
        echo "Available files in artifacts directory:"
        ls -la "${DOCKER_WRITEABLE_DIR}/" || echo "Artifacts directory not found"
        exit 1
      fi
      
      echo "SUCCESS: Input notebook found: ${INPUT_NOTEBOOK_PATH}"
      
      # Setup Python environment
      PYTHON_BIN=""
      PIP_BIN=""
      
      if [ -x "/opt/conda/envs/rapids/bin/python" ]; then
        PYTHON_BIN="/opt/conda/envs/rapids/bin/python"
        PIP_BIN="/opt/conda/envs/rapids/bin/pip"
        echo "Using rapids environment"
      elif [ -x "/opt/conda/bin/python" ]; then
        PYTHON_BIN="/opt/conda/bin/python"
        PIP_BIN="/opt/conda/bin/pip"
        echo "Using base conda environment"
      else
        echo "ERROR: No Python found in expected locations"
        exit 1
      fi
      
      # Install nbconvert if needed
      echo "Installing/updating nbconvert..."
      $PIP_BIN install --quiet --no-cache-dir --upgrade nbconvert || {
        echo "ERROR: Failed to install nbconvert"
        exit 1
      }
      
      # Verify nbconvert installation
      JUPYTER_BIN=""
      if [ -x "/opt/conda/envs/rapids/bin/jupyter" ]; then
        JUPYTER_BIN="/opt/conda/envs/rapids/bin/jupyter"
      elif [ -x "/opt/conda/bin/jupyter" ]; then
        JUPYTER_BIN="/opt/conda/bin/jupyter"
      else
        echo "ERROR: jupyter command not found"
        exit 1
      fi
      
      echo "Jupyter environment verification:"
      $JUPYTER_BIN --version && echo "Jupyter OK" || (echo "ERROR: Jupyter failed" && exit 1)
      
      # Set output paths
      OUTPUT_HTML_PATH="${DOCKER_WRITEABLE_DIR}/${OUTPUT_NOTEBOOK_HTML}"
      NBCONVERT_LOG_PATH="${DOCKER_WRITEABLE_DIR}/jupyter_nbconvert.log"
      
      # Execute jupyter nbconvert with EXACT GitHub Actions parameters
      echo "Converting notebook to HTML with exact GitHub Actions parameters..."
      echo "Command: jupyter nbconvert --to html \"${INPUT_NOTEBOOK_PATH}\" --output \"${OUTPUT_NOTEBOOK_HTML}\" --output-dir \"${DOCKER_WRITEABLE_DIR}\""
      
      # Use EXACT same command as GitHub Actions workflow
      if $JUPYTER_BIN nbconvert --to html "${INPUT_NOTEBOOK_PATH}" \
          --output "${OUTPUT_NOTEBOOK_HTML}" \
          --output-dir "${DOCKER_WRITEABLE_DIR}" \
          > "${NBCONVERT_LOG_PATH}" 2>&1; then
        echo "SUCCESS: Jupyter nbconvert completed!"
      else
        echo "ERROR: Jupyter nbconvert failed"
        echo "nbconvert log contents:"
        cat "${NBCONVERT_LOG_PATH}" || echo "Log file not found"
        exit 1
      fi
      
      # Verify output HTML file was created
      if [ -f "${OUTPUT_HTML_PATH}" ]; then
        echo "SUCCESS: HTML file created successfully"
        HTML_SIZE=$(du -h "${OUTPUT_HTML_PATH}" | cut -f1)
        echo "HTML file size: ${HTML_SIZE}"
        
        # Save results
        echo -n "success" > "$(results.conversion-status.path)"
        echo -n "${OUTPUT_HTML_PATH}" > "$(results.output-html-path.path)"
        echo -n "${HTML_SIZE}" > "$(results.html-size.path)"
        echo -n "${NBCONVERT_LOG_PATH}" > "$(results.nbconvert-log-path.path)"
        
        # Verify HTML content is valid
        if grep -q "<html>" "${OUTPUT_HTML_PATH}"; then
          echo "SUCCESS: HTML file contains valid HTML content"
        else
          echo "WARNING: HTML file may not contain valid HTML content"
        fi
        
      else
        echo "ERROR: HTML file not found after conversion: ${OUTPUT_HTML_PATH}"
        echo "Contents of output directory:"
        ls -la "${DOCKER_WRITEABLE_DIR}/" || echo "Output directory not accessible"
        echo -n "failed" > "$(results.conversion-status.path)"
        exit 1
      fi
      
      echo "Complete GitHub Actions compatible HTML conversion finished successfully!"
  
  - name: prepare-html-for-testing
    image: alpine:latest
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop: ["ALL"]
      runAsNonRoot: false
      runAsUser: 0
      seccompProfile:
        type: RuntimeDefault
    env:
    - name: WORKSPACE_SHARED_PATH
      value: $(workspaces.shared-storage.path)
    - name: DOCKER_WRITEABLE_DIR
      value: "/workspace/shared/artifacts"
    - name: OUTPUT_NOTEBOOK_HTML
      value: $(params.output-html-name)
    script: |
      #!/bin/sh
      set -eu
      
      echo "Preparing HTML file for pytest testing..."
      cd "${WORKSPACE_SHARED_PATH}"
      
      # Fix permissions
      chown -R root:root "${WORKSPACE_SHARED_PATH}" 2>/dev/null || echo "WARNING: Cannot change workspace ownership"
      chmod -R 777 "${WORKSPACE_SHARED_PATH}" 2>/dev/null || echo "WARNING: Cannot change workspace permissions"
      
      # Create staging directory for testing
      mkdir -p "${DOCKER_WRITEABLE_DIR}/staging"
      chown -R root:root "${DOCKER_WRITEABLE_DIR}/staging" 2>/dev/null || echo "WARNING: Cannot change staging ownership"
      chmod -R 777 "${DOCKER_WRITEABLE_DIR}/staging" 2>/dev/null || echo "WARNING: Cannot change staging permissions"
      
      # Copy HTML file to staging area for pytest
      HTML_SOURCE="${DOCKER_WRITEABLE_DIR}/${OUTPUT_NOTEBOOK_HTML}"
      HTML_STAGING="${DOCKER_WRITEABLE_DIR}/staging/${OUTPUT_NOTEBOOK_HTML}"
      
      if [ -f "${HTML_SOURCE}" ]; then
        cp "${HTML_SOURCE}" "${HTML_STAGING}"
        chmod 666 "${HTML_STAGING}" 2>/dev/null || echo "WARNING: Cannot change HTML file permissions"
        echo "SUCCESS: HTML file prepared for testing at ${HTML_STAGING}"
        
        # Verify staging file
        if [ -f "${HTML_STAGING}" ]; then
          STAGING_SIZE=$(du -h "${HTML_STAGING}" | cut -f1)
          echo "Staging file size: ${STAGING_SIZE}"
        else
          echo "ERROR: HTML file not found in staging after copy"
          exit 1
        fi
      else
        echo "ERROR: Source HTML file not found: ${HTML_SOURCE}"
        exit 1
      fi
      
      echo "HTML file ready for pytest testing" 