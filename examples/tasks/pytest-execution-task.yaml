apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: pytest-execution
  namespace: tekton-pipelines
  labels:
    app.kubernetes.io/name: pytest-execution
    app.kubernetes.io/component: tekton-task
    app.kubernetes.io/version: "1.0.0"
spec:
  description: |
    PyTest execution task for running tests against generated HTML reports.
    Downloads test framework repository and executes comprehensive test suite.
  params:
  - name: test-repo-url
    description: URL of the test framework repository
    type: string
    default: "https://github.com/NVIDIA-AI-Blueprints/blueprint-github-test.git"
  - name: test-repo-branch
    description: Branch of the test repository to checkout
    type: string
    default: "main"
  - name: html-input-file
    description: Name of the HTML file to test
    type: string
    default: "executed_notebook.html"
  - name: pytest-markers
    description: PyTest markers to run (e.g., 'single_cell')
    type: string
    default: "single_cell"
  - name: poetry-install
    description: Whether to use poetry for dependency management
    type: string
    default: "true"
  workspaces:
  - name: shared-storage
    description: Shared storage for HTML files, test results, and test repository
    mountPath: /workspace/shared
  results:
  - name: test-status
    description: Overall test execution status
  - name: coverage-xml-path
    description: Path to coverage XML report
  - name: pytest-xml-path
    description: Path to pytest XML report
  - name: report-html-path
    description: Path to pytest HTML report
  steps:
  - name: download-test-repo
    image: alpine/git:latest
    env:
    - name: WORKSPACE_SHARED_PATH
      value: $(workspaces.shared-storage.path)
    - name: WORKSPACE_TEST_PATH
      value: $(workspaces.shared-storage.path)/test
    script: |
      #!/bin/sh
      set -eu
      
      echo "📥 Downloading test framework repository..."
      echo "🔗 Repository URL: $(params.test-repo-url)"
      
      mkdir -p "${WORKSPACE_TEST_PATH}"
      cd "${WORKSPACE_TEST_PATH}"
      
      git clone --branch $(params.test-repo-branch) --depth 1 $(params.test-repo-url) test-framework
      cd test-framework
      
      echo "✅ Test repository downloaded successfully"
      echo "📂 Repository contents:"
      ls -la
      
      if [ -d "input" ]; then
        echo "✅ Found 'input' directory"
      else
        echo "⚠️  'input' directory not found, creating it..."
        mkdir -p input
      fi
      
  - name: prepare-test-inputs
    image: alpine:latest
    env:
    - name: WORKSPACE_SHARED_PATH
      value: $(workspaces.shared-storage.path)
    - name: WORKSPACE_TEST_PATH
      value: $(workspaces.shared-storage.path)/test
    - name: DOCKER_WRITEABLE_DIR
      value: "/workspace/shared/artifacts"
    - name: HTML_INPUT_FILE
      value: $(params.html-input-file)
    script: |
      #!/bin/sh
      set -eu
      
      echo "📋 Preparing test inputs..."
      cd "${WORKSPACE_TEST_PATH}/test-framework"
      
      # Clear the input directory as specified in the original workflow
      echo "🧹 Clearing input directory..."
      rm -rf input/*
      echo "✅ Input directory cleared"
      
      # Copy HTML file to input directory
      if [ -f "${DOCKER_WRITEABLE_DIR}/staging/${HTML_INPUT_FILE}" ]; then
        echo "📄 Copying HTML file to input directory..."
        cp "${DOCKER_WRITEABLE_DIR}/staging/${HTML_INPUT_FILE}" input/
        echo "✅ HTML file copied: ${HTML_INPUT_FILE}"
      elif [ -f "${DOCKER_WRITEABLE_DIR}/${HTML_INPUT_FILE}" ]; then
        echo "📄 Copying HTML file from artifacts..."
        cp "${DOCKER_WRITEABLE_DIR}/${HTML_INPUT_FILE}" input/
        echo "✅ HTML file copied: ${HTML_INPUT_FILE}"
      else
        echo "❌ HTML file not found: ${HTML_INPUT_FILE}"
        exit 1
      fi
      
      echo "📁 Final input directory contents:"
      ls -la input/
      
  - name: execute-tests
    image: python:3.12-slim
    env:
    - name: WORKSPACE_TEST_PATH
      value: $(workspaces.shared-storage.path)/test
    - name: WORKSPACE_SHARED_PATH
      value: $(workspaces.shared-storage.path)
    - name: DOCKER_WRITEABLE_DIR
      value: "/workspace/shared/artifacts"
    - name: OUTPUT_PYTEST_COVERAGE_XML
      value: "coverage.xml"
    - name: OUTPUT_PYTEST_RESULT_XML
      value: "pytest_results.xml"
    - name: OUTPUT_PYTEST_REPORT_HTML
      value: "pytest_report.html"
    workingDir: $(workspaces.shared-storage.path)/test/test-framework
    script: |
      #!/bin/bash
      set -eu
      
      echo "🔧 Setting up test environment..."
      
      apt-get update && apt-get install -y curl git
      
      if [ "$(params.poetry-install)" = "true" ]; then
        echo "📦 Installing Poetry..."
        curl -sSL https://install.python-poetry.org | python3 -
        export PATH="/root/.local/bin:$PATH"
        
        poetry --version
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true
        
        echo "📥 Installing dependencies with Poetry..."
        poetry install --no-dev || poetry install --no-dev --no-interaction
        
        echo "🚀 Running pytest with Poetry..."
        poetry run pytest -m $(params.pytest-markers) \
          --cov=./ \
          --cov-report=xml:"${DOCKER_WRITEABLE_DIR}/${OUTPUT_PYTEST_COVERAGE_XML}" \
          --junitxml="${DOCKER_WRITEABLE_DIR}/${OUTPUT_PYTEST_RESULT_XML}" \
          --html="${DOCKER_WRITEABLE_DIR}/${OUTPUT_PYTEST_REPORT_HTML}" \
          --self-contained-html \
          -v \
          2>&1 | tee "${DOCKER_WRITEABLE_DIR}/pytest_execution.log" || true
          
      else
        echo "📥 Installing dependencies with pip..."
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        fi
        pip install pytest pytest-cov pytest-html
        
        echo "🚀 Running pytest directly..."
        python -m pytest -m $(params.pytest-markers) \
          --cov=./ \
          --cov-report=xml:"${DOCKER_WRITEABLE_DIR}/${OUTPUT_PYTEST_COVERAGE_XML}" \
          --junitxml="${DOCKER_WRITEABLE_DIR}/${OUTPUT_PYTEST_RESULT_XML}" \
          --html="${DOCKER_WRITEABLE_DIR}/${OUTPUT_PYTEST_REPORT_HTML}" \
          --self-contained-html \
          -v \
          2>&1 | tee "${DOCKER_WRITEABLE_DIR}/pytest_execution.log" || true
      fi
      
      # Check test results and save paths
      echo "📊 Analyzing test results..."
      
      if [ -f "${DOCKER_WRITEABLE_DIR}/${OUTPUT_PYTEST_COVERAGE_XML}" ]; then
        echo "✅ Coverage XML report created"
        echo -n "${DOCKER_WRITEABLE_DIR}/${OUTPUT_PYTEST_COVERAGE_XML}" > "$(results.coverage-xml-path.path)"
      else
        echo "⚠️  Coverage XML report not found"
      fi
      
      if [ -f "${DOCKER_WRITEABLE_DIR}/${OUTPUT_PYTEST_RESULT_XML}" ]; then
        echo "✅ JUnit XML report created"
        echo -n "${DOCKER_WRITEABLE_DIR}/${OUTPUT_PYTEST_RESULT_XML}" > "$(results.pytest-xml-path.path)"
      else
        echo "⚠️  JUnit XML report not found"
      fi
      
      if [ -f "${DOCKER_WRITEABLE_DIR}/${OUTPUT_PYTEST_REPORT_HTML}" ]; then
        echo "✅ HTML test report created"
        echo -n "${DOCKER_WRITEABLE_DIR}/${OUTPUT_PYTEST_REPORT_HTML}" > "$(results.report-html-path.path)"
      else
        echo "⚠️  HTML test report not found"
      fi
      
      echo -n "completed" > "$(results.test-status.path)"
      echo "✅ Test execution completed"
