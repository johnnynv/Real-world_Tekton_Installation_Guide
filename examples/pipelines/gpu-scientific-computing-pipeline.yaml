apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gpu-scientific-computing-pipeline
  namespace: tekton-pipelines
  labels:
    app.kubernetes.io/name: gpu-scientific-computing-pipeline
    app.kubernetes.io/component: tekton-pipeline
    app.kubernetes.io/version: "1.0.0"
    tekton.dev/pipeline-type: "scientific-computing"
spec:
  description: |
    GPU-accelerated scientific computing pipeline for processing Jupyter notebooks.
    
    This pipeline performs the following steps:
    1. Environment preparation and code checkout
    2. GPU-accelerated notebook execution with Papermill
    3. Notebook to HTML conversion using Jupyter nbconvert
    4. Automated testing with PyTest framework
    
    Equivalent to the original GitHub Actions workflow but running on Tekton with GPU support.
  
  params:
  # Source repository parameters
  - name: git-repo-url
    description: Git repository URL containing the notebook to execute
    type: string
  - name: git-revision
    description: Git revision to checkout (commit hash, branch, or tag)
    type: string
    default: "main"
  
  # Notebook execution parameters
  - name: notebook-path
    description: Path to the notebook file (relative to repository root)
    type: string
    default: "notebooks/01_scRNA_analysis_preprocessing.ipynb"
  - name: output-notebook-name
    description: Name for the executed notebook output
    type: string
    default: "executed_notebook.ipynb"
  - name: output-html-name
    description: Name for the HTML conversion output
    type: string
    default: "executed_notebook.html"
  
  # GPU and resource parameters
  - name: gpu-count
    description: Number of GPUs required for notebook execution
    type: string
    default: "1"
  - name: gpu-memory-limit
    description: Memory limit for GPU containers
    type: string
    default: "32Gi"
  - name: gpu-cpu-limit
    description: CPU limit for GPU containers
    type: string
    default: "8"
  - name: container-image
    description: GPU-enabled container image for notebook execution
    type: string
    default: "nvcr.io/nvidia/rapidsai/notebooks:25.04-cuda12.8-py3.12"
  
  # Testing parameters
  - name: test-repo-url
    description: URL of the test framework repository
    type: string
    default: "https://github.com/NVIDIA-AI-Blueprints/blueprint-github-test.git"
  - name: pytest-markers
    description: PyTest markers to run
    type: string
    default: "single_cell"
  
  # Pipeline behavior parameters
  - name: verbose-logging
    description: Enable verbose logging throughout the pipeline
    type: string
    default: "true"
  - name: continue-on-test-failure
    description: Continue pipeline even if tests fail
    type: string
    default: "true"
  
  workspaces:
  - name: source-code-workspace
    description: Workspace for source code checkout and processing
  - name: shared-artifacts-workspace
    description: Shared workspace for artifacts between tasks
  - name: gpu-cache-workspace
    description: GPU computation cache workspace for performance optimization
  - name: test-execution-workspace
    description: Workspace for test framework and execution
  
  results:
  - name: notebook-execution-time
    description: Time taken for notebook execution
    value: "$(tasks.execute-notebook-gpu.results.execution-time)"
  - name: test-results-summary
    description: Summary of test execution results
    value: "$(tasks.run-tests.results.test-status)"
  
  tasks:
  # Task 1: Environment preparation and code checkout
  - name: prepare-environment
    taskRef:
      name: gpu-env-preparation
    params:
    - name: git-repo-url
      value: $(params.git-repo-url)
    - name: git-revision
      value: $(params.git-revision)
    - name: verbose
      value: $(params.verbose-logging)
    workspaces:
    - name: source-code
      workspace: source-code-workspace
    - name: shared-storage
      workspace: shared-artifacts-workspace
  
  # Task 2: GPU-accelerated notebook execution (depends on environment preparation)
  - name: execute-notebook-gpu
    taskRef:
      name: gpu-papermill-execution
    runAfter: ["prepare-environment"]
    params:
    - name: notebook-path
      value: $(params.notebook-path)
    - name: output-notebook-name
      value: $(params.output-notebook-name)
    - name: container-image
      value: $(params.container-image)
    - name: gpu-count
      value: $(params.gpu-count)
    - name: memory-limit
      value: $(params.gpu-memory-limit)
    - name: cpu-limit
      value: $(params.gpu-cpu-limit)
    workspaces:
    - name: shared-storage
      workspace: shared-artifacts-workspace
    - name: gpu-cache
      workspace: gpu-cache-workspace
  
  # Task 3: Convert notebook to HTML (depends on notebook execution)
  - name: convert-to-html
    taskRef:
      name: jupyter-nbconvert
    runAfter: ["execute-notebook-gpu"]
    params:
    - name: input-notebook-name
      value: $(params.output-notebook-name)
    - name: output-html-name
      value: $(params.output-html-name)
    - name: embed-images
      value: "true"
    workspaces:
    - name: shared-storage
      workspace: shared-artifacts-workspace
  
  # Task 4: Run PyTest tests (depends on HTML conversion)
  - name: run-tests
    taskRef:
      name: pytest-execution
    runAfter: ["convert-to-html"]
    params:
    - name: test-repo-url
      value: $(params.test-repo-url)
    - name: html-input-file
      value: $(params.output-html-name)
    - name: pytest-markers
      value: $(params.pytest-markers)
    workspaces:
    - name: shared-storage
      workspace: shared-artifacts-workspace
    - name: test-workspace
      workspace: test-execution-workspace
