apiVersion: v1
kind: Pod
metadata:
  name: gpu-scanpy-dependency-test
  namespace: tekton-pipelines
  labels:
    test-type: dependency-validation
spec:
  nodeSelector:
    accelerator: nvidia-tesla-gpu
  tolerations:
  - key: nvidia.com/gpu
    operator: Exists
    effect: NoSchedule
  containers:
  - name: scanpy-test
    image: nvcr.io/nvidia/rapidsai/notebooks:25.04-cuda12.8-py3.12
    command: ["/bin/bash"]
    args:
    - -c
    - |
      echo "üöÄ Starting scanpy dependency test..."
      
      echo "üîç Initial environment check..."
      nvidia-smi --query-gpu=name,memory.total --format=csv,noheader
      echo "Python: $(which python)"
      echo "Conda: $(which conda)"
      echo "Pip: $(which pip)"
      
      # Test 1: Try conda installation first
      echo ""
      echo "üß™ TEST 1: Conda installation of scanpy..."
      conda install -y -c conda-forge -c bioconda scanpy || echo "‚ùå Conda failed"
      
      # Test scanpy import
      echo "üîç Testing scanpy import..."
      python -c "import scanpy as sc; print('‚úÖ scanpy version:', sc.__version__)" && {
        echo "üéâ CONDA METHOD SUCCESS!"
        python -c "import cupy as cp; print('GPU devices:', cp.cuda.runtime.getDeviceCount())"
        exit 0
      } || echo "‚ùå Conda method failed"
      
      # Test 2: Try pip with --user
      echo ""
      echo "üß™ TEST 2: Pip --user installation..."
      pip install --user --no-cache-dir scanpy || echo "‚ùå Pip --user failed"
      
      python -c "import scanpy as sc; print('‚úÖ scanpy version:', sc.__version__)" && {
        echo "‚úÖ PIP --USER METHOD SUCCESS!"
        exit 0
      } || echo "‚ùå Pip --user method failed"
      
      # Test 3: Standard pip
      echo ""
      echo "üß™ TEST 3: Standard pip installation..."
      pip install --no-cache-dir scanpy || echo "‚ùå Standard pip failed"
      
      python -c "import scanpy as sc; print('‚úÖ scanpy version:', sc.__version__)" && {
        echo "‚úÖ STANDARD PIP METHOD SUCCESS!"
        exit 0
      } || echo "‚ùå Standard pip method failed"
      
      # Test 4: Target install with PYTHONPATH
      echo ""
      echo "üß™ TEST 4: Target installation..."
      pip install --target /tmp/python-packages scanpy || echo "‚ùå Target install failed"
      
      export PYTHONPATH="/tmp/python-packages:$PYTHONPATH"
      python -c "import sys; sys.path.insert(0, '/tmp/python-packages'); import scanpy as sc; print('‚úÖ scanpy version:', sc.__version__)" && {
        echo "‚úÖ PYTHONPATH METHOD SUCCESS!"
        echo "üìù Use: pip install --target /tmp/python-packages && export PYTHONPATH=/tmp/python-packages:$$PYTHONPATH"
        exit 0
      } || echo "‚ùå PYTHONPATH method failed"
      
      echo "‚ùå All methods failed"
      echo "Debug info:"
      echo "User: $(whoami)"
      echo "Home: $HOME"
      pip list | grep -E "(scanpy|pandas|numpy)" || echo "No relevant packages found"
      exit 1
      
    resources:
      limits:
        nvidia.com/gpu: 1
        memory: 8Gi
        cpu: 2
      requests:
        nvidia.com/gpu: 1
        memory: 4Gi
        cpu: 1
    securityContext:
      runAsUser: 0
      runAsGroup: 0
  restartPolicy: Never 