apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: jupyter-nbconvert
  namespace: tekton-pipelines
  labels:
    app.kubernetes.io/name: jupyter-nbconvert
    app.kubernetes.io/component: tekton-task
    app.kubernetes.io/version: "1.0.0"
spec:
  description: |
    Jupyter nbconvert task for converting executed notebooks to HTML format.
    Processes notebook files and generates publication-ready HTML reports.
  params:
  - name: input-notebook-name
    description: Name of the input notebook file to convert
    type: string
    default: "executed_notebook.ipynb"
  - name: output-html-name
    description: Name for the output HTML file
    type: string
    default: "executed_notebook.html"
  - name: nbconvert-template
    description: Template to use for nbconvert
    type: string
    default: "html"
  - name: embed-images
    description: Whether to embed images in HTML
    type: string
    default: "true"
  - name: execute-preprocessor
    description: Whether to re-execute notebook during conversion
    type: string
    default: "false"
  workspaces:
  - name: shared-storage
    description: Shared storage for input notebook and output HTML
    mountPath: /workspace/shared
  results:
  - name: conversion-status
    description: Status of HTML conversion
  - name: output-html-path
    description: Path to the generated HTML file
  - name: html-size
    description: Size of the generated HTML file
  steps:
  - name: convert-to-html
    image: jupyter/minimal-notebook:latest
    env:
    - name: WORKSPACE_SHARED_PATH
      value: $(workspaces.shared-storage.path)
    - name: DOCKER_WRITEABLE_DIR
      value: "/workspace/shared/artifacts"
    - name: INPUT_NOTEBOOK
      value: $(params.input-notebook-name)
    - name: OUTPUT_NOTEBOOK_HTML
      value: $(params.output-html-name)
    script: |
      #!/bin/bash
      set -eu
      
      echo "üîÑ Starting Jupyter nbconvert HTML conversion..."
      echo "üìÅ Shared workspace: ${WORKSPACE_SHARED_PATH}"
      echo "üìì Input notebook: ${INPUT_NOTEBOOK}"
      echo "üåê Output HTML: ${OUTPUT_NOTEBOOK_HTML}"
      echo "üìù Template: $(params.nbconvert-template)"
      
      # Switch to shared workspace
      cd "${WORKSPACE_SHARED_PATH}"
      
      # Verify input notebook exists
      if [ ! -f "${DOCKER_WRITEABLE_DIR}/${INPUT_NOTEBOOK}" ]; then
        echo "‚ùå Input notebook not found: ${DOCKER_WRITEABLE_DIR}/${INPUT_NOTEBOOK}"
        echo "üìÅ Available files in artifacts directory:"
        ls -la "${DOCKER_WRITEABLE_DIR}/" || echo "Artifacts directory not found"
        exit 1
      fi
      
      echo "‚úÖ Input notebook found: ${DOCKER_WRITEABLE_DIR}/${INPUT_NOTEBOOK}"
      INPUT_SIZE=$(du -h "${DOCKER_WRITEABLE_DIR}/${INPUT_NOTEBOOK}" | cut -f1)
      echo "üìä Input notebook size: ${INPUT_SIZE}"
      
      # Install nbconvert if not available
      echo "üîß Installing Jupyter nbconvert..."
      pip install --quiet --no-cache-dir nbconvert[webpdf] || {
        echo "‚ÑπÔ∏è  Installing basic nbconvert without webpdf extras..."
        pip install --quiet --no-cache-dir nbconvert
      }
      
      # Install additional dependencies for better HTML output
      pip install --quiet --no-cache-dir beautifulsoup4 bleach || {
        echo "‚ö†Ô∏è  Some optional dependencies failed to install, continuing..."
      }
      
      # Prepare nbconvert command options
      NBCONVERT_OPTIONS=""
      
      if [ "$(params.embed-images)" = "true" ]; then
        NBCONVERT_OPTIONS="${NBCONVERT_OPTIONS} --embed-images"
        echo "üñºÔ∏è  Images will be embedded in HTML"
      fi
      
      if [ "$(params.execute-preprocessor)" = "true" ]; then
        NBCONVERT_OPTIONS="${NBCONVERT_OPTIONS} --execute"
        echo "‚ö° Notebook will be re-executed during conversion"
      else
        echo "üìã Using existing execution results"
      fi
      
      # Create output directory if needed
      mkdir -p "$(dirname "${DOCKER_WRITEABLE_DIR}/${OUTPUT_NOTEBOOK_HTML}")"
      
      echo "üîÑ Converting notebook to HTML..."
      echo "üìù Command: jupyter nbconvert --to $(params.nbconvert-template) \"${DOCKER_WRITEABLE_DIR}/${INPUT_NOTEBOOK}\" --output \"${OUTPUT_NOTEBOOK_HTML}\" --output-dir \"${DOCKER_WRITEABLE_DIR}\""
      
      # Perform conversion with comprehensive logging
      jupyter nbconvert --to $(params.nbconvert-template) \
        "${DOCKER_WRITEABLE_DIR}/${INPUT_NOTEBOOK}" \
        --output "${OUTPUT_NOTEBOOK_HTML}" \
        --output-dir "${DOCKER_WRITEABLE_DIR}" \
        ${NBCONVERT_OPTIONS} \
        --log-level=INFO \
        > "${DOCKER_WRITEABLE_DIR}/jupyter_nbconvert.log" 2>&1
      
      CONVERT_EXIT_CODE=$?
      
      # Check conversion results
      if [ $CONVERT_EXIT_CODE -eq 0 ]; then
        echo "‚úÖ Jupyter nbconvert completed successfully"
        
        # Verify output HTML was created
        if [ -f "${DOCKER_WRITEABLE_DIR}/${OUTPUT_NOTEBOOK_HTML}" ]; then
          echo "‚úÖ HTML file created successfully"
          HTML_SIZE=$(du -h "${DOCKER_WRITEABLE_DIR}/${OUTPUT_NOTEBOOK_HTML}" | cut -f1)
          echo "üìä HTML file size: ${HTML_SIZE}"
          
          # Save results
          echo -n "success" > "$(results.conversion-status.path)"
          echo -n "${DOCKER_WRITEABLE_DIR}/${OUTPUT_NOTEBOOK_HTML}" > "$(results.output-html-path.path)"
          echo -n "${HTML_SIZE}" > "$(results.html-size.path)"
          
        else
          echo "‚ùå HTML file not found after conversion"
          echo -n "error" > "$(results.conversion-status.path)"
          exit 1
        fi
      else
        echo "‚ùå Jupyter nbconvert failed with exit code: $CONVERT_EXIT_CODE"
        
        # Show conversion log for debugging
        echo "üîç Conversion log contents:"
        cat "${DOCKER_WRITEABLE_DIR}/jupyter_nbconvert.log" || echo "No conversion log available"
        
        echo -n "failed" > "$(results.conversion-status.path)"
        exit 1
      fi
      
      echo "üéâ HTML conversion task completed successfully!"
      
  - name: validate-html-output
    image: python:3.12-slim
    env:
    - name: WORKSPACE_SHARED_PATH
      value: $(workspaces.shared-storage.path)
    - name: DOCKER_WRITEABLE_DIR
      value: "/workspace/shared/artifacts"
    - name: OUTPUT_NOTEBOOK_HTML
      value: $(params.output-html-name)
    script: |
      #!/bin/bash
      set -eu
      
      echo "üîç Validating HTML output..."
      cd "${WORKSPACE_SHARED_PATH}"
      
      # Install HTML validation dependencies
      pip install --quiet --no-cache-dir beautifulsoup4 lxml || {
        echo "‚ö†Ô∏è  HTML validation dependencies not available, performing basic checks"
      }
      
      # Check if HTML file exists
      if [ -f "${DOCKER_WRITEABLE_DIR}/${OUTPUT_NOTEBOOK_HTML}" ]; then
        echo "‚úÖ HTML file exists: ${DOCKER_WRITEABLE_DIR}/${OUTPUT_NOTEBOOK_HTML}"
        
        # Check file size
        HTML_SIZE_BYTES=$(stat -c%s "${DOCKER_WRITEABLE_DIR}/${OUTPUT_NOTEBOOK_HTML}")
        if [ "$HTML_SIZE_BYTES" -gt 1000 ]; then
          echo "‚úÖ HTML file size appears reasonable: $HTML_SIZE_BYTES bytes"
        else
          echo "‚ö†Ô∏è  HTML file seems too small: $HTML_SIZE_BYTES bytes"
        fi
        
        # Basic HTML structure validation
        python3 -c "
import sys
import os

html_file = '${DOCKER_WRITEABLE_DIR}/${OUTPUT_NOTEBOOK_HTML}'

try:
    with open(html_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Basic HTML structure checks
    if '<html' in content.lower():
        print('‚úÖ HTML document structure found')
    else:
        print('‚ö†Ô∏è  HTML document structure not detected')
    
    if '<body' in content.lower():
        print('‚úÖ HTML body found')
    else:
        print('‚ö†Ô∏è  HTML body not found')
    
    # Check for notebook content indicators
    if 'jupyter' in content.lower() or 'notebook' in content.lower():
        print('‚úÖ Jupyter notebook content detected')
    else:
        print('‚ÑπÔ∏è  No explicit Jupyter content markers found')
    
    # Check for code cells
    if 'highlight' in content.lower() or 'code' in content.lower():
        print('‚úÖ Code highlighting/cells detected')
    else:
        print('‚ÑπÔ∏è  No code highlighting detected')
    
    # Check for potential errors in HTML
    if 'error' in content.lower() and 'traceback' in content.lower():
        print('‚ö†Ô∏è  Potential error content found in HTML (please review)')
    else:
        print('‚úÖ No obvious error content detected')
    
    print(f'üìä Total HTML content length: {len(content):,} characters')
    
    # Advanced validation with BeautifulSoup if available
    try:
        from bs4 import BeautifulSoup
        soup = BeautifulSoup(content, 'html.parser')
        
        # Count different elements
        div_count = len(soup.find_all('div'))
        pre_count = len(soup.find_all('pre'))
        img_count = len(soup.find_all('img'))
        
        print(f'üìà HTML structure analysis:')
        print(f'   - Div elements: {div_count}')
        print(f'   - Pre elements (code blocks): {pre_count}')
        print(f'   - Images: {img_count}')
        
        # Check for title
        title = soup.find('title')
        if title:
            print(f'üìù Document title: {title.get_text()[:100]}...')
        else:
            print('‚ÑπÔ∏è  No document title found')
            
    except ImportError:
        print('‚ÑπÔ∏è  BeautifulSoup not available for advanced HTML validation')
    except Exception as e:
        print(f'‚ö†Ô∏è  Advanced HTML validation failed: {e}')
    
except Exception as e:
    print(f'‚ùå Error validating HTML file: {e}')
    sys.exit(1)
"
        
        # Check conversion log if available
        if [ -f "${DOCKER_WRITEABLE_DIR}/jupyter_nbconvert.log" ]; then
          echo "üìã Checking conversion log..."
          
          if grep -i "error\|exception\|failed" "${DOCKER_WRITEABLE_DIR}/jupyter_nbconvert.log" > /dev/null; then
            echo "‚ö†Ô∏è  Potential issues found in conversion log:"
            grep -i "error\|exception\|failed" "${DOCKER_WRITEABLE_DIR}/jupyter_nbconvert.log" | tail -3
          else
            echo "‚úÖ No errors found in conversion log"
          fi
        fi
        
      else
        echo "‚ùå HTML file not found: ${DOCKER_WRITEABLE_DIR}/${OUTPUT_NOTEBOOK_HTML}"
        exit 1
      fi
      
      echo "‚úÖ HTML validation completed"
      
  - name: prepare-for-testing
    image: alpine:latest
    env:
    - name: WORKSPACE_SHARED_PATH
      value: $(workspaces.shared-storage.path)
    - name: DOCKER_WRITEABLE_DIR
      value: "/workspace/shared/artifacts"
    - name: OUTPUT_NOTEBOOK_HTML
      value: $(params.output-html-name)
    script: |
      #!/bin/sh
      set -eu
      
      echo "üìã Preparing HTML file for next stage (testing)..."
      cd "${WORKSPACE_SHARED_PATH}"
      
      # Create a staging area for the HTML file that will be used in testing
      mkdir -p "${DOCKER_WRITEABLE_DIR}/staging"
      
      if [ -f "${DOCKER_WRITEABLE_DIR}/${OUTPUT_NOTEBOOK_HTML}" ]; then
        # Copy HTML file to staging area
        cp "${DOCKER_WRITEABLE_DIR}/${OUTPUT_NOTEBOOK_HTML}" "${DOCKER_WRITEABLE_DIR}/staging/"
        echo "‚úÖ HTML file copied to staging area"
        
        # Create a simple metadata file
        cat > "${DOCKER_WRITEABLE_DIR}/staging/conversion_metadata.txt" << EOF
conversion_timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
input_notebook=$(params.input-notebook-name)
output_html=$(params.output-html-name)
conversion_template=$(params.nbconvert-template)
embed_images=$(params.embed-images)
EOF
        
        echo "‚úÖ Metadata file created"
        echo "üìÅ Staging area contents:"
        ls -la "${DOCKER_WRITEABLE_DIR}/staging/"
        
      else
        echo "‚ùå HTML file not found for staging"
        exit 1
      fi
      
      echo "‚úÖ HTML preparation for testing completed" 