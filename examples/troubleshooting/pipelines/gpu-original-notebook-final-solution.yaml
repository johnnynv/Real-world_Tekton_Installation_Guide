apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  name: gpu-original-notebook-final-solution
  namespace: tekton-pipelines
  labels:
    app: gpu-scientific-computing
    trigger: manual
    gpu-pipeline: "true"
    test-type: "final-solution"
  annotations:
    tekton.dev/pipeline-type: "gpu-scientific-computing-final-solution"
    tekton.dev/test-notebook: "01_scRNA_analysis_preprocessing.ipynb"
    tekton.dev/execution-mode: "ubuntu-user-conda-fix"
spec:
  pipelineSpec:
    description: |
      FINAL SOLUTION: GPU-accelerated single-cell RNA analysis pipeline.
      Fixes the ubuntu user conda permission issue discovered through Docker Compose analysis.
      This should successfully execute the original notebook without modifications.
    
    params:
    - name: git-repo-url
      description: Git repository URL containing the notebook to execute
      type: string
      default: "https://github.com/johnnynv/Real-world_Tekton_Installation_Guide.git"
    - name: git-revision
      description: Git revision to checkout
      type: string
      default: "main"
    - name: output-notebook-name
      description: Name for the executed notebook output
      type: string
      default: "01_scRNA_analysis_preprocessing_output.ipynb"
    - name: container-image
      description: GPU-enabled container image for notebook execution
      type: string
      default: "nvcr.io/nvidia/rapidsai/notebooks:25.04-cuda12.8-py3.12"
    
    workspaces:
    - name: processing-workspace
      description: Processing workspace for analysis
    
    tasks:
    # Task 1: Environment preparation and code checkout
    - name: prepare-environment
      taskRef:
        name: gpu-env-preparation-fixed
      params:
      - name: git-repo-url
        value: $(params.git-repo-url)
      - name: git-revision
        value: $(params.git-revision)
      - name: verbose
        value: "true"
      workspaces:
      - name: shared-storage
        workspace: processing-workspace
    
    # Task 2: Execute original notebook with FINAL SOLUTION
    - name: execute-original-notebook-final-solution
      taskRef:
        name: gpu-papermill-execution-final-solution
      runAfter: ["prepare-environment"]
      params:
      - name: notebook-relative-dir
        value: "notebooks"
      - name: notebook-filename
        value: "01_scRNA_analysis_preprocessing.ipynb"
      - name: output-notebook
        value: $(params.output-notebook-name)
      - name: container-image
        value: $(params.container-image)
      workspaces:
      - name: shared-storage
        workspace: processing-workspace
    
    # Task 3: Verify final solution results
    - name: verify-final-solution-results
      runAfter: ["execute-original-notebook-final-solution"]
      taskSpec:
        workspaces:
        - name: shared-storage
        steps:
        - name: verify-execution
          image: alpine:latest
          script: |
            #!/bin/sh
            set -eu
            
            echo "======================================="
            echo "       FINAL SOLUTION VERIFICATION"
            echo "  Docker Compose vs Kubernetes Tekton"
            echo "======================================="
            echo ""
            
            cd $(workspaces.shared-storage.path)
            
            echo "üìÅ Checking all generated files:"
            ls -la artifacts/ || echo "‚ùå Artifacts directory not found"
            echo ""
            
            # Check executed notebook
            if [ -f "artifacts/$(params.output-notebook-name)" ]; then
              NOTEBOOK_SIZE=$(du -h "artifacts/$(params.output-notebook-name)" | cut -f1)
              echo "‚úÖ Executed notebook: $(params.output-notebook-name) (${NOTEBOOK_SIZE})"
            else
              echo "‚ùå Executed notebook missing: $(params.output-notebook-name)"
              exit 1
            fi
            
            # Check papermill log for success indicators
            if [ -f "artifacts/papermill.log" ]; then
              LOG_SIZE=$(du -h "artifacts/papermill.log" | cut -f1)
              echo "‚úÖ Papermill log: papermill.log (${LOG_SIZE})"
              
              echo ""
              echo "üîç Analyzing execution results..."
              
              # Check for RMM errors (the original issue)
              if grep -q "AttributeError.*CUDARuntimeError.*msg" "artifacts/papermill.log"; then
                echo "‚ùå RMM initialization error still found in log"
                echo "The ubuntu user conda fix did not resolve the RMM issue"
              else
                echo "‚úÖ No RMM AttributeError found in log"
              fi
              
              # Check for successful completion
              if grep -q "SUCCESS: Output notebook created" "artifacts/papermill.log"; then
                echo "‚úÖ Papermill execution completed successfully"
              else
                echo "‚ö†Ô∏è  Papermill execution may have had issues"
              fi
              
              # Check for any PapermillExecutionError
              if grep -q "PapermillExecutionError" "artifacts/papermill.log"; then
                echo "‚ùå PapermillExecutionError found - execution failed"
                echo ""
                echo "Last 20 lines of papermill.log:"
                tail -20 "artifacts/papermill.log"
              else
                echo "‚úÖ No PapermillExecutionError found"
              fi
            else
              echo "‚ùå Papermill log missing"
            fi
            
            echo ""
            echo "üéØ FINAL SOLUTION RESULTS:"
            
            # Overall assessment
            if [ -f "artifacts/$(params.output-notebook-name)" ] && ! grep -q "PapermillExecutionError" "artifacts/papermill.log" 2>/dev/null; then
              echo ""
              echo "üéâ BREAKTHROUGH SUCCESS!"
              echo "‚úÖ Original notebook executed successfully in Kubernetes Tekton"
              echo "‚úÖ Docker Compose vs Kubernetes permission issue SOLVED"
              echo "‚úÖ Ubuntu user conda access problem RESOLVED"
              echo "‚úÖ GitHub Actions workflow successfully migrated to Tekton"
              echo ""
              echo "üîë ROOT CAUSE WAS:"
              echo "   - Docker Compose used 'user: rapids' but actual UID 1000 = ubuntu"
              echo "   - Kubernetes runAsUser: 1000 = ubuntu, but ubuntu lacked conda permissions"
              echo "   - Solution: Fix conda ownership for ubuntu user before execution"
              echo ""
              echo "üöÄ TEKTON PIPELINE MIGRATION COMPLETE!"
            else
              echo ""
              echo "‚ö†Ô∏è  EXECUTION ISSUES REMAIN"
              echo "   The final solution may need further refinement."
              echo "   Check papermill.log for specific error details."
            fi
      workspaces:
      - name: shared-storage
        workspace: processing-workspace
    
    workspaces:
    - name: processing-workspace
      description: Processing workspace for analysis
    
  taskRunTemplate:
    podTemplate:
      nodeSelector:
        accelerator: nvidia-tesla-gpu
      securityContext:
        fsGroup: 1000      # ubuntu group
        # Note: individual tasks control their own runAsUser for permission fixes
      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
    serviceAccountName: default
  
  timeouts:
    pipeline: "3h0m0s"
  
  workspaces:
  - name: processing-workspace
    persistentVolumeClaim:
      claimName: processing-workspace 