apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: gpu-papermill-execution-production-init
  namespace: tekton-pipelines
  labels:
    app.kubernetes.io/name: gpu-papermill-execution-production-init
    app.kubernetes.io/component: tekton-task
    app.kubernetes.io/version: "1.0.0"
    production-ready: "true"
    security-model: "init-container-permissions"
spec:
  description: |
    Production-grade GPU-accelerated Papermill execution using Init Container pattern.
    
    Architecture:
    - Init Container (root): Fixes conda and workspace permissions for RAPIDS user (UID 1001)
    - Main Container (rapids): Executes notebook with correct RAPIDS user UID 1001
    
    FIXED: Uses correct rapids user UID 1001 (not 1000 which is ubuntu)
  
  params:
  - name: notebook-relative-dir
    description: Relative directory containing the notebook
    type: string
    default: "notebooks"
  - name: notebook-filename
    description: Notebook filename to execute
    type: string
    default: "01_scRNA_analysis_preprocessing.ipynb"
  - name: output-notebook
    description: Name for the output notebook
    type: string
    default: "01_scRNA_analysis_preprocessing_output.ipynb"
  - name: container-image
    description: Container image to use for execution
    type: string
    default: "nvcr.io/nvidia/rapidsai/notebooks:25.04-cuda12.8-py3.12"
  
  workspaces:
  - name: shared-storage
    description: Shared workspace for input/output files
    mountPath: /workspace/shared
  
  results:
  - name: execution-status
    description: Status of papermill execution
  - name: output-notebook-path
    description: Path to the executed notebook
  - name: papermill-log-path
    description: Path to the papermill execution log
  - name: permission-fix-status
    description: Status of permission fixes applied by init container
  
  stepTemplate:
    env:
    - name: NVIDIA_VISIBLE_DEVICES
      value: "all"
    - name: NVIDIA_DRIVER_CAPABILITIES
      value: "compute,utility"
    - name: WORKSPACE_SHARED_PATH
      value: $(workspaces.shared-storage.path)
    - name: DOCKER_WRITEABLE_DIR
      value: "/workspace/shared/artifacts"
    - name: NOTEBOOK_RELATIVED_DIR
      value: $(params.notebook-relative-dir)
    - name: NOTEBOOK_FILENAME
      value: $(params.notebook-filename)
    - name: OUTPUT_NOTEBOOK
      value: $(params.output-notebook)
    - name: EXTRA_PIP_PACKAGES
      value: "anndata==0.11.4 scanpy==1.11.2 rapids-singlecell==0.12.6"
    volumeMounts:
    - name: dshm
      mountPath: /dev/shm
    - name: conda-permission-fix
      mountPath: /opt/conda-writable
  
  steps:
  # Step 1: Init Container - Permission Setup (root privileges)
  - name: init-permission-setup
    image: $(params.container-image)
    computeResources:
      requests:
        memory: 1Gi
        cpu: 500m
      limits:
        memory: 2Gi
        cpu: 1
    securityContext:
      allowPrivilegeEscalation: true
      capabilities:
        drop: ["ALL"]
        add: ["CHOWN", "DAC_OVERRIDE", "FOWNER"]
      runAsNonRoot: false
      runAsUser: 0  # Init container runs as root for permission fixes
      runAsGroup: 0
      seccompProfile:
        type: RuntimeDefault
    script: |
      #!/bin/bash
      set -eu
      
      echo "=============================================="
      echo "  PRODUCTION INIT CONTAINER - RAPIDS USER UID FIX"
      echo "=============================================="
      echo ""
      echo "Running permission setup as: $(whoami) ($(id))"
      
      # Check what users exist in the container
      echo "üîç Checking available users in container:"
      cat /etc/passwd | grep -E "(rapids|ubuntu)" || echo "No rapids/ubuntu users found in /etc/passwd"
      
      # Get actual rapids user UID from the container
      if id rapids >/dev/null 2>&1; then
        RAPIDS_UID=$(id -u rapids)
        RAPIDS_GID=$(id -g rapids)
        echo "‚úÖ RAPIDS user found with actual UID: $(id rapids)"
        echo "   Actual UID: $RAPIDS_UID, GID: $RAPIDS_GID"
      else
        echo "‚ùå RAPIDS user not found, this should not happen in this image"
        exit 1
      fi
      
      # Also check ubuntu user for reference
      if id ubuntu >/dev/null 2>&1; then
        UBUNTU_UID=$(id -u ubuntu)
        echo "üìã Ubuntu user reference: UID $UBUNTU_UID ($(id ubuntu))"
      fi
      
      # Create conda writable copy for rapids user
      echo "üìÅ Setting up conda environment for RAPIDS user..."
      
      # Copy conda to writable location for rapids user
      if [ ! -d "/opt/conda-writable" ]; then
        echo "Creating writable conda copy..."
        cp -r /opt/conda /opt/conda-writable/
      fi
      
      # Fix conda permissions for ACTUAL rapids user UID
      echo "üîß Fixing conda permissions for RAPIDS user (ACTUAL UID: $RAPIDS_UID)..."
      chown -R $RAPIDS_UID:$RAPIDS_GID /opt/conda-writable/ || echo "WARNING: Some chown operations failed"
      chmod -R 755 /opt/conda-writable/ || echo "WARNING: Some chmod operations failed"
      
      # Also fix original conda permissions for rapids user
      echo "üîß Fixing original conda permissions for RAPIDS user..."
      chown -R $RAPIDS_UID:$RAPIDS_GID /opt/conda/ 2>/dev/null || echo "WARNING: Cannot change original conda ownership"
      chmod -R 755 /opt/conda/ 2>/dev/null || echo "WARNING: Cannot change original conda permissions"
      
      # Fix workspace permissions
      echo "üîß Fixing workspace permissions for RAPIDS user..."
      if [ -d "${WORKSPACE_SHARED_PATH}" ]; then
        chown -R $RAPIDS_UID:$RAPIDS_GID "${WORKSPACE_SHARED_PATH}" || echo "WARNING: Workspace chown failed"
        chmod -R 755 "${WORKSPACE_SHARED_PATH}" || echo "WARNING: Workspace chmod failed"
      fi
      
      # Create and fix output directories
      mkdir -p "${DOCKER_WRITEABLE_DIR}"
      chown -R $RAPIDS_UID:$RAPIDS_GID "${DOCKER_WRITEABLE_DIR}" || echo "WARNING: Output dir chown failed"
      chmod -R 777 "${DOCKER_WRITEABLE_DIR}" || echo "WARNING: Output dir chmod failed"
      
      # Ensure rapids home directory exists and has correct permissions
      if [ ! -d "/home/rapids" ]; then
        mkdir -p /home/rapids
        echo "‚úÖ Created /home/rapids directory"
      fi
      chown $RAPIDS_UID:$RAPIDS_GID /home/rapids
      chmod 755 /home/rapids
      echo "‚úÖ /home/rapids permissions set for UID $RAPIDS_UID"
      
      # Write permission fix status with CORRECT user info
      echo "success" > "${DOCKER_WRITEABLE_DIR}/permission-fix-status.txt"
      echo "rapids-user-uid:$RAPIDS_UID" >> "${DOCKER_WRITEABLE_DIR}/permission-fix-status.txt"
      echo "rapids-user-gid:$RAPIDS_GID" >> "${DOCKER_WRITEABLE_DIR}/permission-fix-status.txt"
      chown $RAPIDS_UID:$RAPIDS_GID "${DOCKER_WRITEABLE_DIR}/permission-fix-status.txt" || true
      
      echo ""
      echo "‚úÖ PERMISSION SETUP COMPLETED FOR RAPIDS USER"
      echo "üìã Summary:"
      echo "   - RAPIDS user: ACTUAL UID $RAPIDS_UID, GID $RAPIDS_GID"
      echo "   - Conda permissions fixed for rapids user"
      echo "   - Workspace permissions configured"
      echo "   - Output directories prepared"
      echo "   - Ready for main container execution as rapids user UID $RAPIDS_UID"
      echo ""
  
  # Step 2: Main Container - Notebook Execution (rapids user with CORRECT UID)
  - name: execute-notebook-as-rapids
    image: $(params.container-image)
    computeResources:
      requests:
        nvidia.com/gpu: 1
        memory: 16Gi
        cpu: 4
      limits:
        nvidia.com/gpu: 1
        memory: 32Gi
        cpu: 8
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop: ["ALL"]
        add: ["IPC_LOCK", "SYS_RESOURCE"]
      runAsNonRoot: true
      runAsUser: 1001  # CORRECTED: Use actual RAPIDS user UID 1001, not 1000
      runAsGroup: 1001 # CORRECTED: Use actual RAPIDS group GID 1001, not 1000
      seccompProfile:
        type: RuntimeDefault
    env:
    - name: HOME
      value: "/home/rapids"  # Docker Compose compatible
    - name: USER
      value: "rapids"        # Docker Compose compatible
    - name: PATH
      value: "/home/rapids/.local/bin:/opt/conda/bin:/usr/local/bin:/usr/bin:/bin"
    - name: PYTHONPATH
      value: "/opt/conda/lib/python3.12/site-packages"
    - name: CONDA_DEFAULT_ENV
      value: "base"
    script: |
      #!/bin/bash
      set -eu
      
      echo "=============================================="
      echo "  PRODUCTION MAIN CONTAINER - RAPIDS USER EXECUTION (CORRECTED UID)"
      echo "=============================================="
      echo ""
      echo "Running as: $(whoami) ($(id))"
      echo "Home: $HOME"
      echo "Path: $PATH"
      echo ""
      
      # Verify we're running as the correct user
      CURRENT_UID=$(id -u)
      if [ "$CURRENT_UID" != "1001" ]; then
        echo "‚ùå ERROR: Expected to run as UID 1001 (rapids), but running as UID $CURRENT_UID"
        echo "This indicates a configuration problem"
        exit 1
      else
        echo "‚úÖ Correctly running as RAPIDS user (UID 1001)"
      fi
      
      # Apply Docker Compose compatible memory settings
      echo "üîß Applying Docker Compose compatible memory settings..."
      ulimit -l unlimited 2>/dev/null || echo "WARNING: Cannot set unlimited memlock"
      ulimit -s 67108864 2>/dev/null || echo "WARNING: Cannot set stack size"
      
      # Verify init container completed successfully
      if [ -f "${DOCKER_WRITEABLE_DIR}/permission-fix-status.txt" ]; then
        echo "‚úÖ Init container status:"
        cat "${DOCKER_WRITEABLE_DIR}/permission-fix-status.txt"
      else
        echo "‚ùå Init container status not found"
        exit 1
      fi
      
      cd "${WORKSPACE_SHARED_PATH}"
      
      # Verify GPU availability
      echo "üîç Checking GPU availability..."
      nvidia-smi --query-gpu=name,memory.total --format=csv,noheader || echo "WARNING: nvidia-smi failed"
      
      # Verify notebook exists
      NOTEBOOK_PATH="${NOTEBOOK_RELATIVED_DIR}/${NOTEBOOK_FILENAME}"
      if [ ! -f "${NOTEBOOK_PATH}" ]; then
        echo "‚ùå Notebook not found: ${NOTEBOOK_PATH}"
        find . -name "*.ipynb" -type f | head -5
        exit 1
      fi
      
      echo "‚úÖ Notebook found: ${NOTEBOOK_PATH}"
      
      # Setup Python environment using RAPIDS user's conda (Docker Compose style)
      echo "üêç Setting up Python environment as RAPIDS user (UID 1001)..."
      
      # Use conda directly - it should now be accessible to rapids user
      PYTHON_BIN="/opt/conda/bin/python"
      PIP_BIN="/opt/conda/bin/pip"
      CONDA_BIN="/opt/conda/bin/conda"
      
      # Verify Python environment access
      echo "üîç Python environment verification:"
      $PYTHON_BIN --version && echo "‚úÖ Python OK" || (echo "‚ùå Python failed" && exit 1)
      $PIP_BIN --version && echo "‚úÖ pip OK" || (echo "‚ùå pip failed" && exit 1)
      $CONDA_BIN --version && echo "‚úÖ conda OK" || (echo "‚ùå conda failed" && exit 1)
      
      # Install dependencies using rapids user's conda
      echo "üì¶ Installing dependencies as RAPIDS user..."
      $PIP_BIN install --user --quiet --no-cache-dir papermill ipykernel jupyter || {
        echo "‚ùå Failed to install papermill"
        exit 1
      }
      
      # Install additional packages (Docker Compose style)
      if [ -n "${EXTRA_PIP_PACKAGES:-}" ]; then
        echo "üì¶ Installing additional packages (Docker Compose compatible)..."
        
        # Install scanpy with conda first for better compatibility
        echo "Installing scanpy with conda..."
        $CONDA_BIN install -y -c conda-forge -c bioconda scanpy || {
          echo "WARNING: Conda scanpy failed, trying pip..."
          $PIP_BIN install --user --quiet --no-cache-dir scanpy || echo "WARNING: scanpy installation failed"
        }
        
        # Install other packages with pip
        echo "Installing other packages with pip..."
        $PIP_BIN install --user --quiet --no-cache-dir ${EXTRA_PIP_PACKAGES} || echo "WARNING: Some pip packages failed"
        
        # Verify key packages
        echo "üîç Verifying package installations..."
        $PYTHON_BIN -c "import scanpy as sc; print('SUCCESS: scanpy version:', sc.__version__)" || {
          echo "WARNING: scanpy verification failed, trying direct install..."
          $PIP_BIN install --user --force-reinstall scanpy
          $PYTHON_BIN -c "import scanpy as sc; print('SUCCESS: scanpy version:', sc.__version__)" || echo "WARNING: scanpy still not working"
        }
        
        $PYTHON_BIN -c "import cupy as cp; print('SUCCESS: cupy GPU count:', cp.cuda.runtime.getDeviceCount())" || echo "WARNING: cupy verification failed"
      fi
      
      # Setup GPU environment (Docker Compose style)
      export CUDA_VISIBLE_DEVICES=${NVIDIA_VISIBLE_DEVICES:-"all"}
      export CUPY_CACHE_DIR="${HOME}/.cupy"
      export NUMBA_CACHE_DIR="${HOME}/.numba"
      mkdir -p "${CUPY_CACHE_DIR}" "${NUMBA_CACHE_DIR}" 2>/dev/null || echo "WARNING: Cannot create cache dirs"
      
      # Find papermill executable
      PAPERMILL_BIN=""
      if [ -x "/home/rapids/.local/bin/papermill" ]; then
        PAPERMILL_BIN="/home/rapids/.local/bin/papermill"
      elif [ -x "/opt/conda/bin/papermill" ]; then
        PAPERMILL_BIN="/opt/conda/bin/papermill"
      else
        echo "‚ùå papermill not found after installation"
        exit 1
      fi
      
      # Execute notebook with EXACT GitHub Actions parameters
      echo "üöÄ Executing notebook with Papermill (Docker Compose Compatible - RAPIDS UID 1001)..."
      PAPERMILL_OUTPUT_PATH="${DOCKER_WRITEABLE_DIR}/${OUTPUT_NOTEBOOK}"
      PAPERMILL_LOG_PATH="${DOCKER_WRITEABLE_DIR}/papermill.log"
      
      echo "Command: $PAPERMILL_BIN \"${NOTEBOOK_PATH}\" \"${PAPERMILL_OUTPUT_PATH}\" --log-output --log-level DEBUG --progress-bar --report-mode --kernel python3"
      
      # Execute with EXACT same parameters as GitHub Actions
      PAPERMILL_EXIT_CODE=0
      $PAPERMILL_BIN "${NOTEBOOK_PATH}" "${PAPERMILL_OUTPUT_PATH}" \
          --log-output \
          --log-level DEBUG \
          --progress-bar \
          --report-mode \
          --kernel python3 2>&1 | tee "${PAPERMILL_LOG_PATH}" || PAPERMILL_EXIT_CODE=$?
      
      # Check results
      if [ $PAPERMILL_EXIT_CODE -ne 0 ]; then
        echo "‚ùå Papermill execution failed with exit code: $PAPERMILL_EXIT_CODE"
        echo "Last 20 lines of papermill log:"
        tail -20 "${PAPERMILL_LOG_PATH}" || true
        echo -n "failed" > "$(results.execution-status.path)"
        exit 1
      fi
      
      # Check for execution errors
      if grep -q "PapermillExecutionError" "${PAPERMILL_LOG_PATH}"; then
        echo "‚ùå Papermill execution failed - PapermillExecutionError found"
        echo "Last 20 lines of papermill log:"
        tail -20 "${PAPERMILL_LOG_PATH}" || true
        echo -n "failed" > "$(results.execution-status.path)"
        exit 1
      fi
      
      # Verify output
      if [ -f "${PAPERMILL_OUTPUT_PATH}" ]; then
        OUTPUT_SIZE=$(du -h "${PAPERMILL_OUTPUT_PATH}" | cut -f1)
        echo "‚úÖ SUCCESS: Output notebook created: ${OUTPUT_SIZE}"
        echo -n "success" > "$(results.execution-status.path)"
        echo -n "${PAPERMILL_OUTPUT_PATH}" > "$(results.output-notebook-path.path)"
        echo -n "${PAPERMILL_LOG_PATH}" > "$(results.papermill-log-path.path)"
        echo -n "success" > "$(results.permission-fix-status.path)"
      else
        echo "‚ùå Output notebook not found"
        echo -n "failed" > "$(results.execution-status.path)"
        exit 1
      fi
      
      echo ""
      echo "üéâ PRODUCTION EXECUTION COMPLETED!"
      echo "‚úÖ Docker Compose compatibility achieved with CORRECT RAPIDS user UID 1001"
      echo "‚úÖ Kubernetes security best practices followed"
      echo "‚úÖ Init Container pattern successfully implemented"
      echo "‚úÖ FIXED: Using correct rapids user UID 1001 instead of 1000"
      echo ""
  
  volumes:
  - name: dshm
    emptyDir:
      medium: Memory
      sizeLimit: 1Gi
  - name: conda-permission-fix
    emptyDir:
      sizeLimit: 5Gi 