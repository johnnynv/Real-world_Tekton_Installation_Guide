apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  name: gpu-original-notebook-docker-compose-exact
  namespace: tekton-pipelines
  labels:
    app: gpu-scientific-computing
    trigger: manual
    gpu-pipeline: "true"
    test-type: "docker-compose-exact-mode"
  annotations:
    tekton.dev/pipeline-type: "gpu-scientific-computing-docker-compose-exact"
    tekton.dev/test-notebook: "01_scRNA_analysis_preprocessing.ipynb"
    tekton.dev/execution-mode: "docker-compose-exact-replica"
spec:
  pipelineSpec:
    description: |
      GPU-accelerated single-cell RNA analysis pipeline using EXACT Docker Compose configuration.
      Uses rapids user (UID 1000) exactly like the successful Docker Compose setup.
    
    params:
    - name: git-repo-url
      description: Git repository URL containing the notebook to execute
      type: string
      default: "https://github.com/johnnynv/Real-world_Tekton_Installation_Guide.git"
    - name: git-revision
      description: Git revision to checkout
      type: string
      default: "main"
    - name: output-notebook-name
      description: Name for the executed notebook output
      type: string
      default: "01_scRNA_analysis_preprocessing_output.ipynb"
    - name: container-image
      description: GPU-enabled container image for notebook execution
      type: string
      default: "nvcr.io/nvidia/rapidsai/notebooks:25.04-cuda12.8-py3.12"
    
    workspaces:
    - name: processing-workspace
      description: Processing workspace for analysis
    
    tasks:
    # Task 1: Environment preparation and code checkout
    - name: prepare-environment
      taskRef:
        name: gpu-env-preparation-fixed
      params:
      - name: git-repo-url
        value: $(params.git-repo-url)
      - name: git-revision
        value: $(params.git-revision)
      - name: verbose
        value: "true"
      workspaces:
      - name: shared-storage
        workspace: processing-workspace
    
    # Task 2: Execute original notebook with EXACT Docker Compose settings
    - name: execute-original-notebook-docker-compose
      taskRef:
        name: gpu-papermill-execution-docker-compose-mode
      runAfter: ["prepare-environment"]
      params:
      - name: notebook-relative-dir
        value: "notebooks"
      - name: notebook-filename
        value: "01_scRNA_analysis_preprocessing.ipynb"
      - name: output-notebook
        value: $(params.output-notebook-name)
      - name: container-image
        value: $(params.container-image)
      workspaces:
      - name: shared-storage
        workspace: processing-workspace
    
    # Task 3: Verify results
    - name: verify-docker-compose-exact-results
      runAfter: ["execute-original-notebook-docker-compose"]
      taskSpec:
        workspaces:
        - name: shared-storage
        steps:
        - name: verify-execution
          image: alpine:latest
          script: |
            #!/bin/sh
            set -eu
            
            echo "======================================="
            echo "  DOCKER COMPOSE EXACT MODE VERIFICATION"
            echo "======================================="
            echo ""
            
            cd $(workspaces.shared-storage.path)
            
            echo "📁 Checking all generated files:"
            ls -la artifacts/ || echo "❌ Artifacts directory not found"
            echo ""
            
            # Check executed notebook
            if [ -f "artifacts/$(params.output-notebook-name)" ]; then
              NOTEBOOK_SIZE=$(du -h "artifacts/$(params.output-notebook-name)" | cut -f1)
              echo "✅ Executed notebook: $(params.output-notebook-name) (${NOTEBOOK_SIZE})"
            else
              echo "❌ Executed notebook missing: $(params.output-notebook-name)"
              exit 1
            fi
            
            # Check papermill log
            if [ -f "artifacts/papermill.log" ]; then
              LOG_SIZE=$(du -h "artifacts/papermill.log" | cut -f1)
              echo "✅ Papermill log: papermill.log (${LOG_SIZE})"
              
              # Check if the log contains any RMM errors
              if grep -q "AttributeError.*CUDARuntimeError.*msg" "artifacts/papermill.log"; then
                echo "⚠️  RMM initialization error found in log (this was the issue)"
              else
                echo "✅ No RMM errors found in log"
              fi
            else
              echo "❌ Papermill log missing"
            fi
            
            echo ""
            echo "🎯 DOCKER COMPOSE EXACT MODE RESULTS:"
            
            # Check if execution succeeded
            if grep -q "SUCCESS: Output notebook created" "artifacts/papermill.log" 2>/dev/null; then
              echo "🎉 SUCCESS: Docker Compose exact mode worked!"
              echo "✅ Original notebook executed successfully with rapids user"
              echo "✅ Environment configuration matches Docker Compose exactly"
              echo "✅ RMM/GPU issues resolved by using correct user context"
              echo ""
              echo "This proves that the Docker Compose environment differences"
              echo "were the root cause of the previous failures."
            else
              echo "⚠️  Execution may have had issues - check logs for details"
              echo "Last 20 lines of papermill.log:"
              tail -20 "artifacts/papermill.log" 2>/dev/null || echo "Log not accessible"
            fi
      workspaces:
      - name: shared-storage
        workspace: processing-workspace
    
    workspaces:
    - name: processing-workspace
      description: Processing workspace for analysis
    
  taskRunTemplate:
    podTemplate:
      nodeSelector:
        accelerator: nvidia-tesla-gpu
      securityContext:
        fsGroup: 1000      # rapids group
        runAsUser: 1000    # rapids user (same as Docker Compose)
      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
    serviceAccountName: default
  
  timeouts:
    pipeline: "2h0m0s"
  
  workspaces:
  - name: processing-workspace
    persistentVolumeClaim:
      claimName: processing-workspace 