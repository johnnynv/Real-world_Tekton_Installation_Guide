apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: gpu-env-preparation-fixed
  namespace: tekton-pipelines
  labels:
    app.kubernetes.io/name: gpu-env-preparation-fixed
    app.kubernetes.io/component: tekton-task
    app.kubernetes.io/version: "1.0.0"
spec:
  description: |
    Environment preparation task for GPU scientific computing workflow.
    Performs git checkout, dependency validation, and environment setup.
    Fixed version that uses only one workspace to avoid conflicts.
  params:
  - name: git-repo-url
    description: Git repository URL to clone
    type: string
  - name: git-revision
    description: Git revision to checkout (commit hash, branch, or tag)
    type: string
    default: "main"
  - name: workspace-subdir
    description: Subdirectory within workspace to clone repository
    type: string
    default: "source"
  - name: verbose
    description: Enable verbose logging
    type: string
    default: "true"
  workspaces:
  - name: shared-storage
    description: Shared storage for source code and artifacts
    mountPath: /workspace/shared
  results:
  - name: commit-sha
    description: SHA of the checked out commit
  - name: repo-status
    description: Repository checkout status
  steps:
  - name: git-clone
    image: alpine/git:latest
    env:
    - name: WORKSPACE_SHARED_PATH
      value: $(workspaces.shared-storage.path)
    script: |
      #!/bin/sh
      set -eu
      
      echo "üöÄ Starting GPU environment preparation..."
      echo "üìÅ Shared workspace: ${WORKSPACE_SHARED_PATH}"
      echo "üîó Repository URL: $(params.git-repo-url)"
      echo "üåø Revision: $(params.git-revision)"
      
      # Create necessary directories
      mkdir -p "${WORKSPACE_SHARED_PATH}/$(params.workspace-subdir)"
      mkdir -p "${WORKSPACE_SHARED_PATH}/logs"
      mkdir -p "${WORKSPACE_SHARED_PATH}/artifacts"
      mkdir -p "${WORKSPACE_SHARED_PATH}/notebooks"
      
      # Safe git clone with backup mechanism
      echo "üì• Starting safe git clone..."
      cd "${WORKSPACE_SHARED_PATH}"
      
      TARGET_DIR="$(params.workspace-subdir)"
      
      # Function to handle existing directory safely
      if [ -d "${TARGET_DIR}" ]; then
        echo "‚ö†Ô∏è  Target directory '${TARGET_DIR}' already exists"
        
        # Create backup with timestamp
        TIMESTAMP=$(date '+%Y%m%d_%H%M%S')
        BACKUP_DIR="${TARGET_DIR}_backup_${TIMESTAMP}"
        
        echo "üíæ Creating backup: ${BACKUP_DIR}"
        if mv "${TARGET_DIR}" "${BACKUP_DIR}"; then
          echo "‚úÖ Backup created successfully: ${BACKUP_DIR}"
        else
          echo "‚ùå Failed to create backup, removing existing directory"
          rm -rf "${TARGET_DIR}"
        fi
      else
        echo "‚úÖ Target directory doesn't exist, proceeding with clone"
      fi
      
      # Perform git clone with retry mechanism
      CLONE_SUCCESS=false
      MAX_RETRIES=3
      
      for attempt in $(seq 1 ${MAX_RETRIES}); do
        echo "üîÑ Clone attempt ${attempt}/${MAX_RETRIES}"
      
      if [ "$(params.verbose)" = "true" ]; then
          if git clone --verbose "$(params.git-repo-url)" "${TARGET_DIR}"; then
            CLONE_SUCCESS=true
            echo "‚úÖ Git clone successful on attempt ${attempt}"
            break
          fi
      else
          if git clone "$(params.git-repo-url)" "${TARGET_DIR}" 2>&1; then
            CLONE_SUCCESS=true
            echo "‚úÖ Git clone successful on attempt ${attempt}"
            break
          fi
        fi
        
        echo "‚ùå Clone attempt ${attempt} failed"
        
        # Clean up partial clone
        if [ -d "${TARGET_DIR}" ]; then
          echo "üßπ Cleaning up partial clone"
          rm -rf "${TARGET_DIR}"
      fi
      
        # Wait before retry (exponential backoff)
        if [ ${attempt} -lt ${MAX_RETRIES} ]; then
          WAIT_TIME=$((attempt * 5))
          echo "‚è≥ Waiting ${WAIT_TIME} seconds before retry"
          sleep ${WAIT_TIME}
        fi
      done
      
      # Check if clone was successful
      if [ "${CLONE_SUCCESS}" != "true" ]; then
        echo "‚ùå All clone attempts failed"
        exit 1
      fi
      
      # Safely navigate to target directory
      if [ ! -d "${TARGET_DIR}" ]; then
        echo "‚ùå Target directory does not exist after clone"
        exit 1
      fi
      
      cd "${TARGET_DIR}"
      
      # Checkout specific revision with error handling
      if [ "$(params.git-revision)" != "main" ] && [ "$(params.git-revision)" != "master" ]; then
        echo "üîÑ Checking out revision: $(params.git-revision)"
        
        # Fetch remote refs in case the revision is a remote branch/tag
        git fetch origin 2>/dev/null || true
        
        if git checkout "$(params.git-revision)"; then
          echo "‚úÖ Successfully checked out revision: $(params.git-revision)"
        else
          echo "‚ùå Failed to checkout revision: $(params.git-revision)"
          echo "Available branches and tags:"
          git branch -a || true
          git tag | head -10 || true
          exit 1
        fi
      else
        echo "‚ÑπÔ∏è  Using default branch: $(params.git-revision)"
      fi
      
      # Get commit information
      COMMIT_SHA=$(git rev-parse HEAD)
      echo "üìå Current commit SHA: ${COMMIT_SHA}"
      echo -n "${COMMIT_SHA}" > "$(results.commit-sha.path)"
      
      # Validate repository structure
      echo "üîç Validating repository structure..."
      if [ -d "notebooks" ]; then
        echo "‚úÖ notebooks/ directory found"
        ls -la notebooks/ | head -10
      else
        echo "‚ö†Ô∏è  notebooks/ directory not found"
      fi
      
      if [ -d "docker-compose" ]; then
        echo "‚úÖ docker-compose/ directory found"
        ls -la docker-compose/
      else
        echo "‚ö†Ô∏è  docker-compose/ directory not found"
      fi
      
      # Copy files to root of shared workspace for other tasks
      echo "üìã Copying source files to shared workspace root..."
      cp -r . "${WORKSPACE_SHARED_PATH}/"
      
      echo "‚úÖ Environment preparation completed successfully"
      echo -n "success" > "$(results.repo-status.path)"

  - name: validate-dependencies
    image: python:3.12-slim
    env:
    - name: WORKSPACE_SHARED_PATH
      value: $(workspaces.shared-storage.path)
    script: |
      #!/bin/bash
      set -eu
      
      echo "üîß Validating Python dependencies..."
      cd "${WORKSPACE_SHARED_PATH}"
      
      # Check if notebook exists
      NOTEBOOK_PATH="notebooks/01_scRNA_analysis_preprocessing.ipynb"
      if [ -f "${NOTEBOOK_PATH}" ]; then
        echo "‚úÖ Found target notebook: ${NOTEBOOK_PATH}"
        
        # Extract notebook size for resource planning
        NOTEBOOK_SIZE=$(du -h "${NOTEBOOK_PATH}" | cut -f1)
        echo "üìä Notebook size: ${NOTEBOOK_SIZE}"
        
        # Simple validation without complex Python parsing
        echo "‚ÑπÔ∏è  GPU dependencies will be validated during notebook execution"
      else
        echo "‚ùå Target notebook not found: ${NOTEBOOK_PATH}"
        exit 1
      fi
      
      # Check for docker-compose configuration
      if [ -f "docker-compose/docker-compose-nb-2504.yaml" ]; then
        echo "‚úÖ Found docker-compose configuration"
        
        # Extract image information
        if command -v grep &> /dev/null; then
          IMAGE_INFO=$(grep "image:" docker-compose/docker-compose-nb-2504.yaml | head -1)
          echo "üê≥ Container image: ${IMAGE_INFO}"
        fi
      else
        echo "‚ö†Ô∏è  docker-compose configuration not found"
      fi
      
      echo "‚úÖ Dependency validation completed" 