apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  name: gpu-papermill-debug-test
  namespace: tekton-pipelines
  labels:
    test-type: "gpu-papermill-debug"
spec:
  pipelineSpec:
    workspaces:
    - name: shared-artifacts-workspace
    tasks:
    - name: gpu-papermill-debug
      workspaces:
      - name: shared-storage
        workspace: shared-artifacts-workspace
      taskSpec:
        workspaces:
        - name: shared-storage
        steps:
        - name: gpu-test-step
          image: nvcr.io/nvidia/rapidsai/notebooks:25.04-cuda12.8-py3.12
          computeResources:
            requests:
              nvidia.com/gpu: "1"
            limits:
              nvidia.com/gpu: "1"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
            runAsNonRoot: false
            runAsUser: 0
            seccompProfile:
              type: RuntimeDefault
          env:
          - name: NVIDIA_VISIBLE_DEVICES
            value: "all"
          - name: NVIDIA_DRIVER_CAPABILITIES
            value: "compute,utility"
          script: |
            #!/bin/bash
            set -eu
            
            echo "üîç GPU Papermill Debug Test"
            echo "==============================="
            
            echo "üñ•Ô∏è 1. Basic system info:"
            whoami
            id
            
            echo ""
            echo "üìÅ 2. Device files check:"
            ls -la /dev/nvidia* || echo "‚ùå No nvidia devices"
            
            echo ""
            echo "üîß 3. nvidia-smi test:"
            nvidia-smi || echo "‚ùå nvidia-smi failed"
            
            echo ""
            echo "üêç 4. Python CUDA test:"
            python3 -c "
            import sys
            print(f'Python version: {sys.version}')
            
            try:
                import cupy as cp
                print(f'‚úÖ CuPy version: {cp.__version__}')
                print(f'‚úÖ CUDA devices: {cp.cuda.runtime.getDeviceCount()}')
                
                # Test basic GPU operation
                a = cp.array([1, 2, 3])
                print(f'‚úÖ Basic GPU array: {a}')
                
            except Exception as e:
                print(f'‚ùå CuPy test failed: {e}')
            
            try:
                import rmm
                print(f'‚úÖ RMM version: {rmm.__version__}')
                
                # Try simple RMM initialization without device parameter
                print('üîß Testing RMM basic initialization...')
                rmm.reinitialize(
                    managed_memory=False,
                    pool_allocator=False
                )
                print('‚úÖ RMM basic initialization succeeded')
                
            except Exception as e:
                print(f'‚ùå RMM basic test failed: {e}')
                import traceback
                traceback.print_exc()
            
            try:
                # Test with device 0 explicitly
                print('üîß Testing RMM with device 0...')
                rmm.reinitialize(
                    managed_memory=False,
                    pool_allocator=False,
                    devices=0
                )
                print('‚úÖ RMM device 0 initialization succeeded')
                
            except Exception as e:
                print(f'‚ùå RMM device 0 test failed: {e}')
                import traceback
                traceback.print_exc()
            "
            
            echo ""
            echo "üì¶ 5. CUDA libraries check:"
            ldconfig -p | grep cuda | head -5 || echo "No CUDA libraries found"
            
            echo ""
            echo "üîß 6. Environment variables:"
            env | grep -E "(CUDA|NVIDIA)" | sort
            
            echo ""
            echo "‚úÖ GPU Papermill debug test completed"
  workspaces:
  - name: shared-artifacts-workspace
    persistentVolumeClaim:
      claimName: shared-artifacts-workspace 