apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  name: gpu-original-notebook-docker-compose-mode
  namespace: tekton-pipelines
  labels:
    app: gpu-scientific-computing
    trigger: manual
    gpu-pipeline: "true"
    test-type: "docker-compose-mode"
  annotations:
    tekton.dev/pipeline-type: "gpu-scientific-computing-docker-compose-compatible"
    tekton.dev/test-notebook: "01_scRNA_analysis_preprocessing.ipynb"
    tekton.dev/execution-mode: "docker-compose-compatible"
    tekton.dev/memory-fix: "ulimits-memlock-shm-size"
spec:
  pipelineSpec:
    description: |
      GPU-accelerated single-cell RNA analysis pipeline using Docker Compose compatible settings.
      This version uses the same memory management configuration as the working Docker Compose setup.
    
    params:
    - name: git-repo-url
      description: Git repository URL containing the notebook to execute
      type: string
      default: "https://github.com/johnnynv/Real-world_Tekton_Installation_Guide.git"
    - name: git-revision
      description: Git revision to checkout
      type: string
      default: "main"
    - name: output-notebook-name
      description: Name for the executed notebook output
      type: string
      default: "01_scRNA_analysis_preprocessing_output.ipynb"
    - name: container-image
      description: GPU-enabled container image for notebook execution
      type: string
      default: "nvcr.io/nvidia/rapidsai/notebooks:25.04-cuda12.8-py3.12"
    
    workspaces:
    - name: processing-workspace
      description: Processing workspace for analysis
    
    tasks:
    # Task 1: Environment preparation and code checkout
    - name: prepare-environment
      taskRef:
        name: gpu-env-preparation-fixed
      params:
      - name: git-repo-url
        value: $(params.git-repo-url)
      - name: git-revision
        value: $(params.git-revision)
      - name: verbose
        value: "true"
      workspaces:
      - name: shared-storage
        workspace: processing-workspace
    
    # Task 2: Execute original notebook with Docker Compose compatible settings
    - name: execute-original-notebook-fixed
      taskRef:
        name: gpu-papermill-execution-fixed  # ‰ΩøÁî®‰øÆÂ§çÁâàÊú¨ÁöÑtask
      runAfter: ["prepare-environment"]
      params:
      - name: notebook-path
        value: "notebooks/01_scRNA_analysis_preprocessing.ipynb"
      - name: output-notebook-name
        value: $(params.output-notebook-name)
      - name: container-image
        value: $(params.container-image)
      - name: gpu-count
        value: "1"
      - name: memory-limit
        value: "32Gi"  # Â¢ûÂä†ÂÜÖÂ≠òÈôêÂà∂
      - name: cpu-limit
        value: "8"     # Â¢ûÂä†CPUÈôêÂà∂
      workspaces:
      - name: shared-storage
        workspace: processing-workspace
    
    # Task 3: Convert notebook to HTML (depends on notebook execution)
    - name: convert-to-html
      taskRef:
        name: jupyter-nbconvert
      runAfter: ["execute-original-notebook-fixed"]
      params:
      - name: input-notebook-name
        value: $(params.output-notebook-name)
      - name: output-html-name
        value: "01_scRNA_analysis_preprocessing_output.html"
      - name: embed-images
        value: "true"
      workspaces:
      - name: shared-storage
        workspace: processing-workspace
    
    # Task 4: Verify results
    - name: verify-docker-compose-results
      runAfter: ["convert-to-html"]
      taskSpec:
        workspaces:
        - name: shared-storage
        steps:
        - name: verify-execution
          image: alpine:latest
          script: |
            #!/bin/sh
            set -eu
            
            echo "üîç Verifying Docker Compose compatible execution results..."
            cd $(workspaces.shared-storage.path)
            
            echo "üìÅ Checking all generated files:"
            ls -la artifacts/
            
            # Check executed notebook
            if [ -f "artifacts/$(params.output-notebook-name)" ]; then
              NOTEBOOK_SIZE=$(du -h "artifacts/$(params.output-notebook-name)" | cut -f1)
              echo "‚úÖ Executed notebook: $(params.output-notebook-name) (${NOTEBOOK_SIZE})"
            else
              echo "‚ùå Executed notebook missing: $(params.output-notebook-name)"
              exit 1
            fi
            
            # Check HTML output
            if [ -f "artifacts/01_scRNA_analysis_preprocessing_output.html" ]; then
              HTML_SIZE=$(du -h "artifacts/01_scRNA_analysis_preprocessing_output.html" | cut -f1)
              echo "‚úÖ HTML output: 01_scRNA_analysis_preprocessing_output.html (${HTML_SIZE})"
            else
              echo "‚ùå HTML output missing"
              exit 1
            fi
            
            echo ""
            echo "üéâ DOCKER COMPOSE COMPATIBLE MODE SUCCESS!"
            echo "‚úÖ Original notebook executed successfully with Docker Compose settings"
            echo "‚úÖ Memory management fix (ulimits + shm_size) applied"
            echo "‚úÖ RMM initialization compatibility resolved"
            echo "‚úÖ HTML conversion completed"
            echo "‚úÖ All required outputs verified"
            echo ""
            echo "üìä Configuration that worked:"
            echo "   - ulimits.memlock: unlimited"
            echo "   - shm_size: 1Gi"
            echo "   - capabilities: IPC_LOCK"
            echo "   - runAsUser: 1000 (rapids user)"
            echo "   - Same packages as Docker Compose"
      workspaces:
      - name: shared-storage
        workspace: processing-workspace
    
    workspaces:
    - name: processing-workspace
      description: Processing workspace for analysis
    
  taskRunTemplate:
    podTemplate:
      nodeSelector:
        accelerator: nvidia-tesla-gpu
      securityContext:
        fsGroup: 1000      # rapids group
        runAsUser: 1000    # rapids user (same as Docker Compose)
      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
    serviceAccountName: default
  
  timeouts:
    pipeline: "3h0m0s"  # 3Â∞èÊó∂Ë∂ÖÊó∂
  
  workspaces:
  - name: processing-workspace
    persistentVolumeClaim:
      claimName: processing-workspace 